{"version":3,"sources":["components/Header.js","components/SearchList.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["HeaderWrapper","styled","header","HeaderTitle","h1","Header","SearchRow","div","SearchRowHeader","SearchRowItem","span","SearchRowHeaderItem","SearchList","streetsList","map","street","id","key","old","new","SearchWrapper","main","InputWrapper","form","InputControl","input","props","error","css","Search","useState","searchString","setSearchValue","streets","cleanedSearchString","trim","toLowerCase","length","filter","s","match","value","onChange","e","target","type","placeholder","autoFocus","GlobalStyle","createGlobalStyle","App","Fragment","Component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"ypBAIA,IAAMA,EAAgBC,IAAOC,OAAV,KAWbC,EAAcF,IAAOG,GAAV,KAiBFC,EARA,WACb,OACE,kBAACL,EAAD,KACE,kBAACG,EAAD,oM,knBCvBN,IAAMG,EAAYL,IAAOM,IAAV,KAWTC,EAAkBP,YAAOK,EAAPL,CAAH,KAKfQ,EAAgBR,IAAOS,KAAV,KAObC,EAAsBV,YAAOQ,EAAPR,CAAH,KAqBVW,EAjBI,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACpB,OACE,6BACE,kBAACL,EAAD,KACE,kBAACG,EAAD,8FACA,kBAACA,EAAD,yFAEDE,EAAYC,KAAI,SAACC,EAAQC,GAAT,OACf,kBAACV,EAAD,CAAWW,IAAKD,GACd,kBAACP,EAAD,KAAgBM,EAAOG,KACvB,kBAACT,EAAD,KAAgBM,EAAOI,W,i+BClCjC,IAAMC,EAAgBnB,IAAOoB,KAAV,KAQbC,EAAerB,IAAOsB,KAAV,KAMZC,EAAevB,IAAOwB,MAAV,KAqBd,SAAAC,GAAK,OACLA,EAAMC,OACNC,YADA,QA8CWC,EApCA,WAAO,IAAD,EACoBC,mBAAS,IAD7B,mBACZC,EADY,KACEC,EADF,KAOfnB,EAAcoB,EAEZC,EAAsBH,EAAaI,OAAOC,cAUhD,OARIF,EAAoBG,OAAS,IAC/BxB,EAAcoB,EAAQK,QACpB,SAAAC,GAAC,OACCA,EAAErB,IAAIkB,cAAcI,MAAMN,IAC1BK,EAAEpB,IAAIiB,cAAcI,MAAMN,OAK9B,kBAACd,EAAD,KACE,kBAACE,EAAD,KACE,kBAACE,EAAD,CACEG,OAAQd,EAAYwB,OACpBI,MAAOV,EACPW,SAtBa,SAAAC,GACnBX,EAAeW,EAAEC,OAAOH,QAsBlBI,KAAK,OACLC,YAAY,oNACZC,WAAS,KAGb,kBAAC,EAAD,CAAYlC,YAAaA,M,ymBC7E/B,IAAMmC,EAAcC,YAAH,KAwCFC,E,iLAVX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACH,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUI,aCvBZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DAsCN,SAASkB,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAjD,GACL6C,QAAQ7C,MAAM,4CAA6CA,MC3FjEkD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,kBAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,kBAAN,sBAEP7B,IAgEV,SAAiCM,EAAOC,GAEtC0B,MAAM3B,GACHK,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BT,OAAOC,SAASuC,eAKpBrC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,OC3C/BE,I","file":"static/js/main.7542da42.chunk.js","sourcesContent":["import React from \"react\";\n\nimport styled from \"styled-components\";\n\nconst HeaderWrapper = styled.header`\n  height: 70px;\n  background: #2980b9;\n  line-height: 70px;\n\n  @media screen and (max-width: 425px) {\n    line-height: 1.2;\n    padding: 20px 0;\n  }\n`;\n\nconst HeaderTitle = styled.h1`\n  padding: 0 20px;\n  color: #fff;\n  font-size: 1.25rem;\n  margin: 0 auto;\n  max-width: 960px;\n  width: 100%;\n`;\n\nconst Header = () => {\n  return (\n    <HeaderWrapper>\n      <HeaderTitle>Старые &mdash; Новые названия улиц Алматы</HeaderTitle>\n    </HeaderWrapper>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nimport styled from \"styled-components\";\n\nconst SearchRow = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  padding: 0 10px;\n  &:hover {\n    background-color: rgba(#3498db, 0.5);\n  }\n`;\n\nconst SearchRowHeader = styled(SearchRow)`\n  margin-bottom: 20px;\n  font-weight: bold;\n`;\n\nconst SearchRowItem = styled.span`\n  display: block;\n  flex-basis: 48%;\n  font-size: 1rem;\n  text-align: left;\n`;\n\nconst SearchRowHeaderItem = styled(SearchRowItem)`\n  text-align: center;\n`;\n\nconst SearchList = ({ streetsList }) => {\n  return (\n    <div>\n      <SearchRowHeader>\n        <SearchRowHeaderItem>Старое название</SearchRowHeaderItem>\n        <SearchRowHeaderItem>Новое название</SearchRowHeaderItem>\n      </SearchRowHeader>\n      {streetsList.map((street, id) => (\n        <SearchRow key={id}>\n          <SearchRowItem>{street.old}</SearchRowItem>\n          <SearchRowItem>{street.new}</SearchRowItem>\n        </SearchRow>\n      ))}\n    </div>\n  );\n};\n\nexport default SearchList;\n","import React, { useState } from \"react\";\n\nimport styled, { css } from \"styled-components\";\n\nimport streets from \"../streets.json\";\nimport SearchList from \"./SearchList.js\";\n\nconst SearchWrapper = styled.main`\n  display: flex;\n  flex-direction: column;\n  max-width: 960px;\n  width: 100%;\n  margin: 0 auto;\n`;\n\nconst InputWrapper = styled.form`\n  padding: 20px 20px;\n  display: flex;\n  justify-content: center;\n`;\n\nconst InputControl = styled.input`\n  display: block;\n  width: 100%;\n  max-width: 470px;\n  height: 42px;\n  padding: 8px 12px;\n  font-size: 1rem;\n  font-weight: 300;\n  color: #34495e;\n  border: 2px solid #bdc3c7;\n  border-radius: 6px;\n  transition: border-color 0.25s linear, color 0.25s linear,\n    background-color 0.25s linear;\n  appearance: none;\n\n  &:focus {\n    border-color: #1abc9c;\n    outline: 0;\n    box-shadow: none;\n  }\n\n  ${props =>\n    props.error &&\n    css`\n      color: #e74c3c;\n      border-color: #e74c3c;\n      &:focus {\n        border-color: #e74c3c;\n      }\n    `}\n`;\n\nconst Search = () => {\n  const [searchString, setSearchValue] = useState(\"\");\n\n  const handleChange = e => {\n    setSearchValue(e.target.value);\n  };\n\n  let streetsList = streets;\n\n  const cleanedSearchString = searchString.trim().toLowerCase();\n\n  if (cleanedSearchString.length > 0) {\n    streetsList = streets.filter(\n      s =>\n        s.old.toLowerCase().match(cleanedSearchString) ||\n        s.new.toLowerCase().match(cleanedSearchString)\n    );\n  }\n\n  return (\n    <SearchWrapper>\n      <InputWrapper>\n        <InputControl\n          error={!streetsList.length}\n          value={searchString}\n          onChange={handleChange}\n          type=\"text\"\n          placeholder=\"Введите старое или новое название улицы\"\n          autoFocus\n        />\n      </InputWrapper>\n      <SearchList streetsList={streetsList} />\n    </SearchWrapper>\n  );\n};\n\nexport default Search;\n","import React, { Component } from \"react\";\n\nimport { createGlobalStyle } from \"styled-components\";\n\nimport Header from \"./components/Header.js\";\nimport Search from \"./components/Search.js\";\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n\n  html {\n    font-size: 18px;\n\n    @media screen and (max-width: 425px) {\n      font-size: 14px;\n    }\n\n    @media screen and (max-width: 320px) {\n      font-size: 12px;\n    }\n  }\n\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <GlobalStyle />\n        <Header />\n        <Search />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}